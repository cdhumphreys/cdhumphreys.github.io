---
import { Picture } from "astro:assets";
import Tag from "./Tag.astro";
const { img, alt, tags, title, style, href } = Astro.props;
---

<a
    href={href}
    target="_blank"
    rel="noreferrer"
    class="js-projectCard project-card"
    style={style}
>
    <div class="project-card__image-wrapper">
        <Picture
            src={img}
            widths={[400, 800, 1200]}
            alt={alt}
            class="project-card__image"
            loading="lazy"
        />
        <div class="js-projectCardOverlay project-card__overlay">
            <div class="project-card__text">
                <div class="project-card__description">
                    <slot />
                </div>
            </div>
        </div>
    </div>
    <div class="project-card__footer">
        <h3 class="project-card__title">
            {title}
        </h3>
        <div class="project-tags">
            {
                tags.length && (
                    <div class="project-card__tags">
                        {tags.map((t: string) => (
                            <Tag class="tag">{t}</Tag>
                        ))}
                    </div>
                )
            }
        </div>
    </div>
</a>

<style>
    .project-card {
        position: relative;
        display: flex;
        flex-direction: column;
        gap: var(--spacing-20);

        isolation: isolate;

        overflow: hidden;

        max-width: 100%;

        .project-card__image-wrapper {
            position: relative;
            overflow: hidden;
            aspect-ratio: 350 / 326;

            top: 0;
            left: 0;
            width: 100%;

            z-index: -1;

            @media (min-width: 1024px) {
                aspect-ratio: 580 / 326;
            }
        }

        .project-card__footer {
            display: flex;
            justify-content: space-between;
            align-items: center;

            @media (min-width: 1024px) {
                padding-inline: var(--spacing-10);
                flex-direction: row;
            }
        }

        .project-card__image {
            position: absolute;
            top: -100px;
            left: 0;
            width: 100%;
            height: calc(100% + 200px);
            object-fit: cover;
            object-position: top center;

            /* filter: brightness(0.8); */
        }

        .project-card__overlay {
            position: absolute;

            top: 50%;
            left: 50%;

            width: 80%;
            height: 80%;

            display: flex;
            flex-direction: column;
            justify-content: center;
            gap: var(--spacing-24);
            align-items: center;

            text-align: center;

            padding: var(--spacing-30) var(--spacing-10);

            background-color: rgba(0, 0, 0, 0.6);
            border-radius: var(--radius-10);
            backdrop-filter: blur(15px);

            transform: translate(-50%, -50%);

            clip-path: polygon(0% 0%, 0% 0%, 0% 100%, 0% 100%);

            will-change: clip-path;

            @media screen and (min-width: 1024px) {
                padding: var(--spacing-40);
            }
        }

        .project-card__text {
            display: flex;
            align-items: center;
            justify-content: center;
            flex-grow: 1;
        }

        .project-card__title {
            position: relative;
            font-size: var(--fs-18);
            color: white;

            isolation: isolate;

            @media (min-width: 1024px) {
                font-size: var(--fs-24);
            }
        }

        .project-card__description {
            font-size: var(--fs-16);
            text-wrap: balance;
            max-width: 55ch;
        }

        .project-card__tags {
            display: flex;
            flex-wrap: wrap;

            justify-content: center;
            align-items: flex-start;
            gap: var(--spacing-10);
        }
    }
</style>

<script>
    import { animate, inView } from "motion";

    const cards = document.querySelectorAll(".js-projectCard");

    cards.forEach(function (card) {
        const overlay = card.querySelector<HTMLElement>(
            ".js-projectCardOverlay",
        );
        if (!overlay) return;

        const initialClipPath = "polygon(0% 0%, 0% 0%, 0% 100%, 0% 100%)";
        const hoverEnterClipPath =
            "polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)";
        const hoverLeaveClipPath =
            "polygon(100% 0%, 100% 0%, 100% 100%, 100% 100%)";

        const revealAnimation = () =>
            animate(
                overlay,
                {
                    clipPath: [null, hoverEnterClipPath],
                },
                { duration: 0.75 },
            );

        const hideAnimation = () =>
            animate(
                overlay,
                {
                    clipPath: [null, hoverLeaveClipPath],
                },
                { duration: 0.5 },
            ).finished.then(function () {
                overlay.style.clipPath = initialClipPath;
            });

        card.addEventListener("mouseenter", revealAnimation);
        card.addEventListener("mouseleave", hideAnimation);
        inView(
            card,
            () => {
                if (window.innerWidth < 1024) {
                    revealAnimation();
                }
                return hideAnimation;
            },
            {
                amount: 0.75,
            },
        );
    });
</script>
